"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/chat/page",{

/***/ "(app-pages-browser)/./app/chat/page.tsx":
/*!***************************!*\
  !*** ./app/chat/page.tsx ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ChatPage)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _components_chat_chat_container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/chat/chat-container */ \"(app-pages-browser)/./components/chat/chat-container.tsx\");\n/* harmony import */ var _hooks_useInvestmentValidation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/hooks/useInvestmentValidation */ \"(app-pages-browser)/./hooks/useInvestmentValidation.ts\");\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/./node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\nfunction ChatPage() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react__WEBPACK_IMPORTED_MODULE_4__.Suspense, {\n        fallback: null,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ChatPageContent, {}, void 0, false, {\n            fileName: \"D:\\\\Python\\\\AI_MCP_A2A\\\\frontend\\\\app\\\\chat\\\\page.tsx\",\n            lineNumber: 42,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"D:\\\\Python\\\\AI_MCP_A2A\\\\frontend\\\\app\\\\chat\\\\page.tsx\",\n        lineNumber: 41,\n        columnNumber: 5\n    }, this);\n}\n_c = ChatPage;\nfunction ChatPageContent() {\n    _s();\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)([]);\n    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)('');\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(false);\n    const [sessionId, setSessionId] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(null);\n    const isSendingRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(false);\n    const { validateQuestion } = (0,_hooks_useInvestmentValidation__WEBPACK_IMPORTED_MODULE_2__.useInvestmentValidation)();\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter)();\n    const searchParams = (0,next_navigation__WEBPACK_IMPORTED_MODULE_3__.useSearchParams)();\n    // URL 파라미터에서 초기 질문 가져오기 및 자동 실행\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        const initialQuestion = searchParams.get('q');\n        if (initialQuestion && !isLoading && messages.length === 0) {\n            const question = decodeURIComponent(initialQuestion);\n            setInput(question);\n            // 자동으로 질문 실행\n            setTimeout(()=>{\n                handleAutoSend(question);\n            }, 100);\n        }\n    }, [\n        searchParams,\n        isLoading,\n        messages.length\n    ]);\n    // 자동 질문 실행 함수\n    const handleAutoSend = async (question)=>{\n        if (!question.trim() || isLoading || isSendingRef.current) return;\n        isSendingRef.current = true;\n        const inputText = question.trim();\n        // 먼저 투자 관련 질문인지 검증\n        const validationResult = await validateQuestion(inputText);\n        const isInvestmentRelated = validationResult.is_investment_related;\n        const userMessage = {\n            id: Date.now().toString(),\n            type: 'user',\n            content: inputText,\n            timestamp: new Date(),\n            status: 'success'\n        };\n        const loadingMessage = {\n            id: (Date.now() + 1).toString(),\n            type: 'assistant',\n            content: isInvestmentRelated ? '분석을 시작하고 있어요...' : '답변을 준비하고 있어요...',\n            timestamp: new Date(),\n            status: 'sending',\n            isInvestmentRelated\n        };\n        setMessages([\n            userMessage,\n            loadingMessage\n        ]);\n        setInput('');\n        setIsLoading(true);\n        // 실제 분석 로직은 기존 handleSend와 동일\n        try {\n            await executeAnalysis(inputText, isInvestmentRelated, loadingMessage);\n        } finally{\n            isSendingRef.current = false;\n        }\n    };\n    // 분석 실행 로직을 분리\n    const executeAnalysis = async (inputText, isInvestmentRelated, loadingMessage)=>{\n        try {\n            var _response_body;\n            // 비투자 질문이면 백엔드 요청 없이 바로 거부 메시지 표시\n            if (!isInvestmentRelated) {\n                setMessages((prev)=>prev.map((msg)=>msg.id === loadingMessage.id ? {\n                            ...msg,\n                            content: \"죄송합니다. 저는 투자 분석 전문 AI입니다. 주식, 경제, 투자 관련 질문만 답변드릴 수 있어요. 관련 분야로 다시 질문해 주세요.\",\n                            status: 'success'\n                        } : msg));\n                setIsLoading(false);\n                return;\n            }\n            // 투자 관련 질문만 백엔드로 분석 요청\n            const apiBaseUrl = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8000';\n            const response = await fetch(\"\".concat(apiBaseUrl, \"/analyze/stream\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    question: inputText,\n                    session_id: sessionId || undefined\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n            }\n            const reader = (_response_body = response.body) === null || _response_body === void 0 ? void 0 : _response_body.getReader();\n            if (!reader) {\n                throw new Error('스트림을 읽을 수 없습니다');\n            }\n            const decoder = new TextDecoder();\n            try {\n                while(true){\n                    const { done, value } = await reader.read();\n                    if (done) break;\n                    const chunk = decoder.decode(value, {\n                        stream: true\n                    });\n                    const lines = chunk.split('\\n');\n                    for (const line of lines){\n                        if (line.startsWith('data: ')) {\n                            try {\n                                const jsonStr = line.slice(6).trim();\n                                if (!jsonStr) continue;\n                                const data = JSON.parse(jsonStr);\n                                switch(data.type){\n                                    case 'start':\n                                        if (!sessionId && data.session_id) {\n                                            setSessionId(data.session_id);\n                                        }\n                                        break;\n                                    case 'step_update':\n                                        setMessages((prev)=>prev.map((msg)=>msg.id === loadingMessage.id ? {\n                                                    ...msg,\n                                                    content: \"\".concat(data.step, \" 단계 진행 중...\"),\n                                                    analysisStep: {\n                                                        step: data.step,\n                                                        message: \"\".concat(data.step, \" 단계 진행 중...\"),\n                                                        status: data.status || 'running'\n                                                    }\n                                                } : msg));\n                                        break;\n                                    case 'step_completed':\n                                        setMessages((prev)=>prev.map((msg)=>msg.id === loadingMessage.id ? {\n                                                    ...msg,\n                                                    analysisStep: {\n                                                        step: data.step,\n                                                        message: \"\".concat(data.step, \" 단계 완료\"),\n                                                        status: 'completed'\n                                                    }\n                                                } : msg));\n                                        break;\n                                    case 'final_response':\n                                        setMessages((prev)=>prev.map((msg)=>msg.id === loadingMessage.id ? {\n                                                    ...msg,\n                                                    content: data.response,\n                                                    status: 'success',\n                                                    usedMCPServers: data.used_servers ? {\n                                                        used_servers: data.used_servers,\n                                                        connected_servers: data.used_servers,\n                                                        available_tools: data.used_servers.length,\n                                                        total_servers: 6\n                                                    } : undefined\n                                                } : msg));\n                                        break;\n                                    case 'complete':\n                                        setIsLoading(false);\n                                        break;\n                                    case 'error':\n                                        throw new Error(data.error || \"알 수 없는 오류가 발생했습니다.\");\n                                }\n                            } catch (parseError) {\n                                console.warn('JSON 파싱 실패:', parseError, 'Line:', line);\n                            }\n                        }\n                    }\n                }\n            } finally{\n                reader.releaseLock();\n            }\n        } catch (error) {\n            console.error('스트리밍 실패:', error);\n            setMessages((prev)=>prev.map((msg)=>msg.id === loadingMessage.id ? {\n                        ...msg,\n                        content: \"죄송합니다. 서버와의 연결에 문제가 발생했습니다.\\n\\n\".concat(error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.', \"\\n\\n잠시 후 다시 시도해주세요.\"),\n                        status: 'error'\n                    } : msg));\n            setIsLoading(false);\n        }\n    };\n    const handleSend = async ()=>{\n        if (!input.trim() || isLoading || isSendingRef.current) return;\n        isSendingRef.current = true;\n        const inputText = input.trim();\n        // 먼저 투자 관련 질문인지 검증\n        const validationResult = await validateQuestion(inputText);\n        const isInvestmentRelated = validationResult.is_investment_related;\n        const userMessage = {\n            id: Date.now().toString(),\n            type: 'user',\n            content: inputText,\n            timestamp: new Date(),\n            status: 'success'\n        };\n        const loadingMessage = {\n            id: (Date.now() + 1).toString(),\n            type: 'assistant',\n            content: isInvestmentRelated ? '분석을 시작하고 있어요...' : '답변을 준비하고 있어요...',\n            timestamp: new Date(),\n            status: 'sending',\n            isInvestmentRelated\n        };\n        setMessages((prev)=>[\n                ...prev,\n                userMessage,\n                loadingMessage\n            ]);\n        setInput('');\n        setIsLoading(true);\n        // 분석 실행\n        try {\n            await executeAnalysis(inputText, isInvestmentRelated, loadingMessage);\n        } finally{\n            isSendingRef.current = false;\n        }\n    };\n    // 새 채팅 시작\n    const handleNewChat = ()=>{\n        setMessages([]);\n        setInput('');\n        setSessionId(null);\n        // URL에서 쿼리 파라미터 제거\n        router.replace('/chat');\n    };\n    // 채팅 기록 지우기\n    const handleClear = ()=>{\n        if (window.confirm('대화 기록을 모두 지우시겠습니까?')) {\n            setMessages([]);\n            setSessionId(null);\n        }\n    };\n    // 채팅 내보내기\n    const handleExport = ()=>{\n        const exportData = {\n            timestamp: new Date().toISOString(),\n            messages: messages.map((msg)=>({\n                    type: msg.type,\n                    content: msg.content,\n                    timestamp: msg.timestamp.toISOString()\n                }))\n        };\n        const blob = new Blob([\n            JSON.stringify(exportData, null, 2)\n        ], {\n            type: 'application/json'\n        });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = \"chat-export-\".concat(new Date().toISOString().split('T')[0], \".json\");\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    };\n    // 메시지 복사 완료 알림\n    const handleMessageCopy = ()=>{\n        console.log('메시지가 복사되었습니다.');\n    };\n    // 메시지 재생성\n    const handleMessageRegenerate = (messageId)=>{\n        const lastUserMessage = messages.slice().reverse().find((msg)=>msg.type === 'user');\n        if (lastUserMessage) {\n            setInput(lastUserMessage.content);\n            const messageIndex = messages.findIndex((msg)=>msg.id === messageId);\n            if (messageIndex > 0) {\n                setMessages((prev)=>prev.slice(0, messageIndex));\n            }\n        }\n    };\n    // 메시지 피드백\n    const handleMessageFeedback = (messageId, type)=>{\n        console.log(\"메시지 \".concat(messageId, \"에 \").concat(type, \" 피드백\"));\n    };\n    // 메인 페이지로 돌아가기\n    const handleBackToHome = ()=>{\n        router.push('/');\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_chat_chat_container__WEBPACK_IMPORTED_MODULE_1__.ChatContainer, {\n        messages: messages,\n        input: input,\n        isLoading: isLoading,\n        onInputChange: setInput,\n        onSend: handleSend,\n        onMessageCopy: handleMessageCopy,\n        onMessageRegenerate: handleMessageRegenerate,\n        onMessageFeedback: handleMessageFeedback,\n        onNewChat: handleNewChat,\n        onClear: handleClear,\n        onExport: handleExport,\n        onBackToHome: handleBackToHome\n    }, void 0, false, {\n        fileName: \"D:\\\\Python\\\\AI_MCP_A2A\\\\frontend\\\\app\\\\chat\\\\page.tsx\",\n        lineNumber: 383,\n        columnNumber: 5\n    }, this);\n}\n_s(ChatPageContent, \"oLOVUFkLBOecMCsJHJnIlRg7otQ=\", false, function() {\n    return [\n        _hooks_useInvestmentValidation__WEBPACK_IMPORTED_MODULE_2__.useInvestmentValidation,\n        next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter,\n        next_navigation__WEBPACK_IMPORTED_MODULE_3__.useSearchParams\n    ];\n});\n_c1 = ChatPageContent;\nvar _c, _c1;\n$RefreshReg$(_c, \"ChatPage\");\n$RefreshReg$(_c1, \"ChatPageContent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/chat/page.tsx\n"));

/***/ })

});