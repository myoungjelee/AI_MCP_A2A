services:
  # ===== MCP 서버들 =====

  # 1. 거시경제 데이터 처리 시스템 MCP 서버
  macroeconomic_mcp:
    build:
      context: .
      dockerfile: docker/mcp_servers/Dockerfile
    container_name: macroeconomic_mcp
    ports:
      - "8042:8042"
    environment:
      - MCP_SERVER_TYPE=macroeconomic
      - MCP_SERVER_PORT=8042
      - MCP_SERVER_HOST=0.0.0.0
      - ECOS_API_KEY=${ECOS_API_KEY}
      - DART_API_KEY=${DART_API_KEY}
      - FRED_API_KEY=${FRED_API_KEY}
    volumes:
      - ./src:/app/src
      - ./requirements.txt:/app/requirements.txt
      - ./.env:/app/.env
    command: ["python", "-m", "src.mcp_servers.macroeconomic.server"]
    restart: unless-stopped
    networks:
      - ai_mcp_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8042/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 2. 재무 분석 시스템 MCP 서버
  financial_analysis_mcp:
    build:
      context: .
      dockerfile: docker/mcp_servers/Dockerfile
    container_name: financial_analysis_mcp
    ports:
      - "8040:8040"
    environment:
      - MCP_SERVER_TYPE=financial_analysis
      - MCP_SERVER_PORT=8040
      - MCP_SERVER_HOST=0.0.0.0
      - DART_API_KEY=${DART_API_KEY}
      - FRED_API_KEY=${FRED_API_KEY}
    volumes:
      - ./src:/app/src
      - ./requirements.txt:/app/requirements.txt
      - ./.env:/app/.env
    command: ["python", "-m", "src.mcp_servers.financial_analysis.server"]
    restart: unless-stopped
    networks:
      - ai_mcp_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8040/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 3. 주식 분석 시스템 MCP 서버
  stock_analysis_mcp:
    build:
      context: .
      dockerfile: docker/mcp_servers/Dockerfile
    container_name: stock_analysis_mcp
    ports:
      - "8052:8052"
    environment:
      - MCP_SERVER_TYPE=stock_analysis
      - MCP_SERVER_PORT=8052
      - MCP_SERVER_HOST=0.0.0.0
    volumes:
      - ./src:/app/src
      - ./requirements.txt:/app/requirements.txt
      - ./.env:/app/.env
    command: ["python", "-m", "src.mcp_servers.stock_analysis.server"]
    restart: unless-stopped
    networks:
      - ai_mcp_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8052/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 4. 네이버 뉴스 수집 시스템 MCP 서버
  naver_news_mcp:
    build:
      context: .
      dockerfile: docker/mcp_servers/Dockerfile
    container_name: naver_news_mcp
    ports:
      - "8051:8051"
    environment:
      - MCP_SERVER_TYPE=naver_news
      - MCP_SERVER_PORT=8051
      - MCP_SERVER_HOST=0.0.0.0
      - NAVER_CLIENT_ID=${NAVER_CLIENT_ID}
      - NAVER_CLIENT_SECRET=${NAVER_CLIENT_SECRET}
    volumes:
      - ./src:/app/src
      - ./requirements.txt:/app/requirements.txt
      - ./.env:/app/.env
    command: ["python", "-m", "src.mcp_servers.naver_news.server"]
    restart: unless-stopped
    networks:
      - ai_mcp_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8051/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 5. Tavily 검색 시스템 MCP 서버
  tavily_search_mcp:
    build:
      context: .
      dockerfile: docker/mcp_servers/Dockerfile
    container_name: tavily_search_mcp
    ports:
      - "8053:8053"
    environment:
      - MCP_SERVER_TYPE=tavily_search
      - MCP_SERVER_PORT=8053
      - MCP_SERVER_HOST=0.0.0.0
      - TAVILY_API_KEY=${TAVILY_API_KEY}
    volumes:
      - ./src:/app/src
      - ./requirements.txt:/app/requirements.txt
      - ./.env:/app/.env
    command: ["python", "-m", "src.mcp_servers.tavily_search.server"]
    restart: unless-stopped
    networks:
      - ai_mcp_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8053/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 6. FinanceDataReader 연동 시스템 MCP 서버
  financedatareader_mcp:
    build:
      context: .
      dockerfile: docker/mcp_servers/Dockerfile
    container_name: financedatareader_mcp
    ports:
      - "8030:8030"
    environment:
      - MCP_SERVER_TYPE=financedatareader
      - MCP_SERVER_PORT=8030
      - MCP_SERVER_HOST=0.0.0.0
    volumes:
      - ./src:/app/src
      - ./requirements.txt:/app/requirements.txt
      - ./.env:/app/.env
    command: ["python", "-m", "src.mcp_servers.financedatareader.server"]
    restart: unless-stopped
    networks:
      - ai_mcp_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8030/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===== 통합 에이전트 =====

  # 7. LangGraph 통합 에이전트
  integrated_agent:
    build:
      context: .
      dockerfile: docker/agents/Dockerfile
    container_name: integrated_agent
    ports:
      - "8000:8000"
    environment:
      - AGENT_PORT=8000
      - AGENT_HOST=0.0.0.0
      - MCP_SERVERS=macroeconomic,financial_analysis,stock_analysis,naver_news,tavily_search,financedatareader
      # Ollama (로컬 LLM) 연결 설정 - Docker에서 호스트로 연결
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - LLM_MODEL=${LLM_MODEL:-gpt-oss:20b}
    volumes:
      - ./src:/app/src
      - ./requirements.txt:/app/requirements.txt
      - ./.env:/app/.env
    command: ["python", "-m", "src.agent.integrated_agent.server"]
    restart: unless-stopped
    networks:
      - ai_mcp_network
    depends_on:
      macroeconomic_mcp:
        condition: service_healthy
      financial_analysis_mcp:
        condition: service_healthy
      stock_analysis_mcp:
        condition: service_healthy
      naver_news_mcp:
        condition: service_healthy
      tavily_search_mcp:
        condition: service_healthy
      financedatareader_mcp:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ===== 인프라 서비스들 =====

  # 8. Redis (캐싱 및 세션 저장)
  redis:
    image: redis:7-alpine
    container_name: ai_mcp_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - ai_mcp_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 9. PostgreSQL (데이터베이스)
  postgres:
    image: postgres:15-alpine
    container_name: ai_mcp_postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ai_mcp_a2a
      - POSTGRES_USER=ai_mcp_user
      - POSTGRES_PASSWORD=ai_mcp_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - ai_mcp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_mcp_user -d ai_mcp_a2a"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# 볼륨 정의
volumes:
  redis_data:
  postgres_data:

# 네트워크 정의
networks:
  ai_mcp_network:
    driver: bridge
    name: ai_mcp_network
