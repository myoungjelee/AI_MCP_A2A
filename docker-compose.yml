version: "3.8"

services:
  # ===== MCP 서버들 =====

  # 1. 거시경제 데이터 처리 시스템 MCP 서버
  macroeconomic_mcp:
    build:
      context: .
      dockerfile: docker/mcp_servers/Dockerfile
    container_name: macroeconomic_mcp
    ports:
      - "8042:8042"
    environment:
      - MCP_SERVER_TYPE=macroeconomic
      - MCP_SERVER_PORT=8042
      - MCP_SERVER_HOST=0.0.0.0
      - ECOS_API_KEY=${ECOS_API_KEY}
      - DART_API_KEY=${DART_API_KEY}
      - FRED_API_KEY=${FRED_API_KEY}
    volumes:
      - ./src:/app/src
      - ./requirements.txt:/app/requirements.txt
      - ./.env:/app/.env
    command: ["python", "-m", "src.mcp_servers.macroeconomic.server"]
    restart: unless-stopped
    networks:
      - ai_mcp_network
    depends_on:
      - redis

  # 2. 재무 분석 시스템 MCP 서버
  financial_analysis_mcp:
    build:
      context: .
      dockerfile: docker/mcp_servers/Dockerfile
    container_name: financial_analysis_mcp
    ports:
      - "8041:8041"
    environment:
      - MCP_SERVER_TYPE=financial_analysis
      - MCP_SERVER_PORT=8041
      - MCP_SERVER_HOST=0.0.0.0
      - DART_API_KEY=${DART_API_KEY}
      - FRED_API_KEY=${FRED_API_KEY}
    volumes:
      - ./src:/app/src
      - ./requirements.txt:/app/requirements.txt
      - ./.env:/app/.env
    command: ["python", "-m", "src.mcp_servers.financial_analysis.server"]
    restart: unless-stopped
    networks:
      - ai_mcp_network
    depends_on:
      - redis

  # 3. 주식 분석 시스템 MCP 서버
  stock_analysis_mcp:
    build:
      context: .
      dockerfile: docker/mcp_servers/Dockerfile
    container_name: stock_analysis_mcp
    ports:
      - "8052:8052"
    environment:
      - MCP_SERVER_TYPE=stock_analysis
      - MCP_SERVER_PORT=8052
      - MCP_SERVER_HOST=0.0.0.0
    volumes:
      - ./src:/app/src
      - ./requirements.txt:/app/requirements.txt
      - ./.env:/app/.env
    command: ["python", "-m", "src.mcp_servers.stock_analysis.server"]
    restart: unless-stopped
    networks:
      - ai_mcp_network
    depends_on:
      - redis

  # 4. 네이버 뉴스 수집 시스템 MCP 서버
  naver_news_mcp:
    build:
      context: .
      dockerfile: docker/mcp_servers/Dockerfile
    container_name: naver_news_mcp
    ports:
      - "8051:8051"
    environment:
      - MCP_SERVER_TYPE=naver_news
      - MCP_SERVER_PORT=8051
      - MCP_SERVER_HOST=0.0.0.0
      - NAVER_CLIENT_ID=${NAVER_CLIENT_ID}
      - NAVER_CLIENT_SECRET=${NAVER_CLIENT_SECRET}
    volumes:
      - ./src:/app/src
      - ./requirements.txt:/app/requirements.txt
      - ./.env:/app/.env
    command: ["python", "-m", "src.mcp_servers.naver_news.server"]
    restart: unless-stopped
    networks:
      - ai_mcp_network
    depends_on:
      - redis

  # 5. Tavily 검색 시스템 MCP 서버
  tavily_search_mcp:
    build:
      context: .
      dockerfile: docker/mcp_servers/Dockerfile
    container_name: tavily_search_mcp
    ports:
      - "8053:8053"
    environment:
      - MCP_SERVER_TYPE=tavily_search
      - MCP_SERVER_PORT=8053
      - MCP_SERVER_HOST=0.0.0.0
      - TAVILY_API_KEY=${TAVILY_API_KEY}
    volumes:
      - ./src:/app/src
      - ./requirements.txt:/app/requirements.txt
      - ./.env:/app/.env
    command: ["python", "-m", "src.mcp_servers.tavily_search.server"]
    restart: unless-stopped
    networks:
      - ai_mcp_network
    depends_on:
      - redis

  # 6. 키움 API 연동 시스템 MCP 서버
  kiwoom_mcp:
    build:
      context: .
      dockerfile: docker/mcp_servers/Dockerfile
    container_name: kiwoom_mcp
    ports:
      - "8030:8030"
    environment:
      - MCP_SERVER_TYPE=kiwoom
      - MCP_SERVER_PORT=8030
      - MCP_SERVER_HOST=0.0.0.0
      - KIWOOM_APP_KEY=${KIWOOM_APP_KEY}
      - KIWOOM_APP_SECRET=${KIWOOM_APP_SECRET}
    volumes:
      - ./src:/app/src
      - ./requirements.txt:/app/requirements.txt
      - ./.env:/app/.env
    command: ["python", "-m", "src.mcp_servers.kiwoom.server"]
    restart: unless-stopped
    networks:
      - ai_mcp_network
    depends_on:
      - redis

  # ===== 통합 에이전트 =====

  # 7. LangGraph 통합 에이전트
  integrated_agent:
    build:
      context: .
      dockerfile: docker/agents/Dockerfile
    container_name: integrated_agent
    ports:
      - "8000:8000"
    environment:
      - AGENT_PORT=8000
      - AGENT_HOST=0.0.0.0
      - MCP_SERVERS=macroeconomic,financial_analysis,stock_analysis,naver_news,tavily_search,kiwoom
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      # Ollama (로컬 LLM) 연결 설정
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://host.docker.internal:11434}
      - LLM_MODEL=${LLM_MODEL:-gpt-oss:20b}
    volumes:
      - ./src:/app/src
      - ./requirements.txt:/app/requirements.txt
      - ./.env:/app/.env
    command: ["python", "-m", "src.la_agents.integrated_agent.server"]
    restart: unless-stopped
    networks:
      - ai_mcp_network
    depends_on:
      - macroeconomic_mcp
      - financial_analysis_mcp
      - stock_analysis_mcp
      - naver_news_mcp
      - tavily_search_mcp
      - kiwoom_mcp
      - redis

  # ===== 인프라 서비스들 =====

  # 8. Redis (캐싱 및 세션 저장)
  redis:
    image: redis:7-alpine
    container_name: ai_mcp_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - ai_mcp_network

  # 9. PostgreSQL (데이터베이스)
  postgres:
    image: postgres:15-alpine
    container_name: ai_mcp_postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ai_mcp_a2a
      - POSTGRES_USER=ai_mcp_user
      - POSTGRES_PASSWORD=ai_mcp_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - ai_mcp_network

  # 10. Prometheus (모니터링)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai_mcp_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    restart: unless-stopped
    networks:
      - ai_mcp_network

  # 11. Grafana (시각화)
  grafana:
    image: grafana/grafana:latest
    container_name: ai_mcp_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - ai_mcp_network
    depends_on:
      - prometheus

# 볼륨 정의
volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

# 네트워크 정의
networks:
  ai_mcp_network:
    driver: bridge
    name: ai_mcp_network
